//
//  ProductListWorker.swift
//  eCommerceVIP
//
//  Created by enes.sakut on 17.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import FirebaseDatabase

class ProductListWorker
{
    let ref = Database.database().reference().child("products")
    let basketRef = Database.database().reference().child("baskets")
    
    func fecthProducts(completion: @escaping ((_ productModel: [ProductList.ProductModel]?)-> ())) {
        var products: [ProductList.ProductModel] = []
        ref.observe(.value) { snapshot in
            if let snapshot = snapshot.children.allObjects as? [DataSnapshot] {
                for snap in snapshot {
                    if let productDict = snap.value as? Dictionary<String, AnyObject> {
                        
                        if let modelInfo = productDict["productInfo"] {
                            let infoModel = ProductList.ProductInfo(from: modelInfo)
                            var viewModel = ProductList.ProductModel(from: productDict)
                            viewModel.productInfo = infoModel
                            products.append(viewModel)
                        }
                    }
                }
            }
            completion(products)
        }
    }
    
    func fetchBaskets(completion: @escaping ((_ productModel: [ProductList.ProductModel]?)-> ())) {
        var products: [ProductList.ProductModel] = []
        products.removeAll()
        basketRef.observe(.value) { snapshot in
            if let snapshot = snapshot.children.allObjects as? [DataSnapshot] {
                for snap in snapshot {
                    if let productDict = snap.value as? Dictionary<String, AnyObject> {
                        if let modelInfo = productDict["productInfo"] {
                            let infoModel = ProductList.ProductInfo(from: modelInfo)
                            var viewModel = ProductList.ProductModel(from: productDict)
                            viewModel.productInfo = infoModel
                            products.append(viewModel)
                        }
                    }
                }
                
            }
            completion(products)
        }
    }
    
    func addBasket(product: ProductList.ProductModel?, piece: Int?, completion: @escaping ((_ isAdded: Bool?)-> ())) {

        var model = product
        model?.count = piece
        do {
            let encoder = JSONEncoder()
            let data = try encoder.encode(model)
            let json = try JSONSerialization.jsonObject(with: data)
            ref.childByAutoId()
                .setValue(json)
            completion(true)
        } catch {
            print("an error occurred", error)
        }
        
    }
    
}

